// VoxAssist Prisma Schema
// PostgreSQL database schema for AI Voice Support Agent

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String   @map("password_hash")
  name         String
  role         String   @default("user")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  userOrganizations UserOrganization[]
  sessions          UserSession[]
  calls             Call[]
  auditLogs         AuditLog[]

  @@map("users")
}

model Organization {
  id        Int      @id @default(autoincrement())
  name      String
  domain    String?
  settings  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  userOrganizations UserOrganization[]
  calls             Call[]
  knowledgeBase     KnowledgeBase[]
  escalationRules   EscalationRule[]
  dailyAnalytics    DailyAnalytics[]
  voiceSettings     VoiceSettings[]

  @@map("organizations")
}

model UserOrganization {
  userId         Int    @map("user_id")
  organizationId Int    @map("organization_id")
  role           String @default("member")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
  @@map("user_organizations")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    Int      @map("user_id")
  token     String   @unique
  isActive  Boolean  @default(true) @map("is_active")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Call {
  id             Int       @id @default(autoincrement())
  callSid        String    @unique @map("call_sid")
  organizationId Int?      @map("organization_id")
  userId         Int?      @map("user_id")
  customerPhone  String    @map("customer_phone")
  twilioPhone    String    @map("twilio_phone")
  status         String    @default("initiated")
  duration       Int       @default(0)
  startTime      DateTime  @default(now()) @map("start_time")
  endTime        DateTime? @map("end_time")
  recordingUrl   String?   @map("recording_url")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  organization     Organization?     @relation(fields: [organizationId], references: [id])
  user             User?             @relation(fields: [userId], references: [id])
  callInteractions CallInteraction[]

  @@index([organizationId])
  @@index([userId])
  @@index([status])
  @@index([startTime])
  @@map("calls")
}

model CallInteraction {
  id              Int       @id @default(autoincrement())
  callId          Int       @map("call_id")
  sequenceNumber  Int       @map("sequence_number")
  speaker         String // 'customer' or 'ai'
  content         String
  audioUrl        String?   @map("audio_url")
  timestamp       DateTime  @default(now())
  aiConfidence    Decimal?  @map("ai_confidence") @db.Decimal(3, 2)
  intent          String?
  sentiment       String?
  sentimentScore  Decimal?  @map("sentiment_score") @db.Decimal(3, 2)

  // Relations
  call Call @relation(fields: [callId], references: [id], onDelete: Cascade)

  @@index([callId])
  @@index([timestamp])
  @@map("call_interactions")
}

model KnowledgeBase {
  id             Int      @id @default(autoincrement())
  organizationId Int?     @map("organization_id")
  category       String
  question       String
  answer         String
  keywords       Json?
  priority       Int      @default(1)
  active         Boolean  @default(true)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([category])
  @@map("knowledge_base")
}

model EscalationRule {
  id             Int      @id @default(autoincrement())
  organizationId Int?     @map("organization_id")
  name           String
  conditions     Json
  action         String
  priority       Int      @default(1)
  active         Boolean  @default(true)
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@map("escalation_rules")
}

model DailyAnalytics {
  id             Int      @id @default(autoincrement())
  organizationId Int?     @map("organization_id")
  date           DateTime @db.Date
  totalCalls     Int      @default(0) @map("total_calls")
  resolvedCalls  Int      @default(0) @map("resolved_calls")
  escalatedCalls Int      @default(0) @map("escalated_calls")
  avgDuration    Decimal  @default(0) @map("avg_duration") @db.Decimal(8, 2)
  avgSentiment   Decimal  @default(0) @map("avg_sentiment") @db.Decimal(3, 2)
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, date], name: "unique_org_date")
  @@index([organizationId, date])
  @@map("daily_analytics")
}

model VoiceSettings {
  id               Int      @id @default(autoincrement())
  organizationId   Int?     @map("organization_id")
  voiceId          String   @map("voice_id")
  voiceName        String   @map("voice_name")
  stability        Decimal  @default(0.5) @db.Decimal(3, 2)
  similarityBoost  Decimal  @default(0.5) @map("similarity_boost") @db.Decimal(3, 2)
  style            Decimal  @default(0.0) @db.Decimal(3, 2)
  useSpeakerBoost  Boolean  @default(true) @map("use_speaker_boost")
  active           Boolean  @default(true)
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@map("voice_settings")
}

model SecurityIncident {
  id               Int      @id @default(autoincrement())
  incidentType     String   @map("incident_type")
  severity         String
  description      String
  ipAddress        String?  @map("ip_address")
  userId           Int?     @map("user_id")
  detectionMethod  String   @map("detection_method")
  status           String   @default("open")
  resolvedAt       DateTime? @map("resolved_at")
  createdAt        DateTime @default(now()) @map("created_at")

  @@index([incidentType])
  @@index([severity])
  @@index([status])
  @@index([createdAt])
  @@map("security_incidents")
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  userId      Int?     @map("user_id")
  action      String
  resource    String
  resourceId  String?  @map("resource_id")
  details     Json?
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}
