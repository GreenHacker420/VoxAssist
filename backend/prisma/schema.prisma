generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String
  role              String             @default("user")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  isActive          Boolean            @default(true) @map("is_active")
  password          String
  auditLogs         AuditLog[]
  calls             Call[]
  notifications     Notification[]
  scriptVersions    ScriptVersion[]
  userOrganizations UserOrganization[]
  sessions          UserSession[]

  @@map("users")
}

model Organization {
  id                Int                @id @default(autoincrement())
  name              String
  domain            String?
  settings          Json?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  aiConfigs         AiConfig?
  calls             Call[]
  campaigns         Campaign[]
  contacts          Contact[]
  dailyAnalytics    DailyAnalytics[]
  escalationRules   EscalationRule[]
  knowledgeBase     KnowledgeBase[]
  providerConfigs   ProviderConfig[]
  scripts           Script[]
  userOrganizations UserOrganization[]
  voiceConfigs      VoiceConfig?
  voiceSettings     VoiceSettings[]
  widgets           Widget[]

  @@map("organizations")
}

model UserOrganization {
  userId         Int          @map("user_id")
  organizationId Int          @map("organization_id")
  role           String       @default("member")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
  @@map("user_organizations")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    Int      @map("user_id")
  token     String   @unique
  isActive  Boolean  @default(true) @map("is_active")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Call {
  id               Int               @id @default(autoincrement())
  callSid          String?           @unique @map("call_sid")
  organizationId   Int?              @map("organization_id")
  customerPhone    String            @map("customer_phone")
  twilioPhone      String?           @map("twilio_phone")
  status           String            @default("initiated")
  duration         Int               @default(0)
  startTime        DateTime          @default(now()) @map("start_time")
  endTime          DateTime?         @map("end_time")
  recordingUrl     String?           @map("recording_url")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  userId           Int?              @map("user_id")
  metadata         Json?
  campaignId       Int?              @map("campaign_id")
  contactId        Int?              @map("contact_id")
  callInteractions CallInteraction[]
  campaign         Campaign?         @relation(fields: [campaignId], references: [id])
  contact          Contact?          @relation(fields: [contactId], references: [id])
  organization     Organization?     @relation(fields: [organizationId], references: [id])
  user             User?             @relation(fields: [userId], references: [id])
  providerCalls    ProviderCall[]
  survey           Survey?

  @@index([organizationId])
  @@index([userId])
  @@index([campaignId])
  @@index([contactId])
  @@index([status])
  @@index([startTime])
  @@map("calls")
}

model CallInteraction {
  id             Int      @id @default(autoincrement())
  callId         Int      @map("call_id")
  sequenceNumber Int      @map("sequence_number")
  speaker        String
  content        String
  audioUrl       String?  @map("audio_url")
  timestamp      DateTime @default(now())
  aiConfidence   Decimal? @map("ai_confidence") @db.Decimal(3, 2)
  intent         String?
  sentiment      String?
  sentimentScore Decimal? @map("sentiment_score") @db.Decimal(3, 2)
  call           Call     @relation(fields: [callId], references: [id], onDelete: Cascade)

  @@index([callId])
  @@index([timestamp])
  @@map("call_interactions")
}

model Campaign {
  id             Int               @id @default(autoincrement())
  organizationId Int               @map("organization_id")
  name           String
  description    String?
  type           String            @default("outbound")
  status         String            @default("draft")
  scriptId       Int?              @map("script_id")
  script         String?
  scheduledStart DateTime?         @map("scheduled_start")
  scheduledEnd   DateTime?         @map("scheduled_end")
  startedAt      DateTime?         @map("started_at")
  pausedAt       DateTime?         @map("paused_at")
  resumedAt      DateTime?         @map("resumed_at")
  completedAt    DateTime?         @map("completed_at")
  settings       Json?
  progress       Int               @default(0)
  successRate    Decimal           @default(0) @map("success_rate") @db.Decimal(5, 2)
  createdBy      Int               @map("created_by")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  calls          Call[]
  contacts       CampaignContact[]
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  scriptRef      Script?           @relation(fields: [scriptId], references: [id])

  @@index([organizationId])
  @@index([scriptId])
  @@index([status])
  @@index([createdAt])
  @@map("campaigns")
}

model Script {
  id             Int             @id @default(autoincrement())
  organizationId Int             @map("organization_id")
  name           String
  description    String?
  type           String          @default("conversation")
  content        String
  category       String          @default("general")
  tags           Json?
  isActive       Boolean         @default(false) @map("is_active")
  version        Int             @default(1)
  activatedAt    DateTime?       @map("activated_at")
  deactivatedAt  DateTime?       @map("deactivated_at")
  createdBy      Int             @map("created_by")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  campaigns      Campaign[]
  tests          ScriptTest[]
  versions       ScriptVersion[]
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([isActive])
  @@index([category])
  @@map("scripts")
}

model ScriptVersion {
  id            Int      @id @default(autoincrement())
  scriptId      Int      @map("script_id")
  version       Int
  content       String
  isActive      Boolean  @default(false) @map("is_active")
  revertedFrom  Int?     @map("reverted_from")
  createdBy     Int      @map("created_by")
  createdAt     DateTime @default(now()) @map("created_at")
  createdByUser User     @relation(fields: [createdBy], references: [id])
  script        Script   @relation(fields: [scriptId], references: [id], onDelete: Cascade)

  @@unique([scriptId, version])
  @@index([scriptId])
  @@map("script_versions")
}

model ScriptTest {
  id             Int      @id @default(autoincrement())
  scriptId       Int      @map("script_id")
  input          String
  response       String
  confidence     Decimal  @db.Decimal(3, 2)
  processingTime Int      @map("processing_time")
  testedBy       Int      @map("tested_by")
  createdAt      DateTime @default(now()) @map("created_at")
  script         Script   @relation(fields: [scriptId], references: [id], onDelete: Cascade)

  @@index([scriptId])
  @@index([createdAt])
  @@map("script_tests")
}

model Contact {
  id             Int               @id @default(autoincrement())
  organizationId Int               @map("organization_id")
  name           String
  email          String?
  phone          String
  metadata       Json?
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  calls          Call[]
  campaigns      CampaignContact[]
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, phone])
  @@index([organizationId])
  @@index([phone])
  @@map("contacts")
}

model CampaignContact {
  campaignId Int      @map("campaign_id")
  contactId  Int      @map("contact_id")
  addedAt    DateTime @default(now()) @map("added_at")
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@id([campaignId, contactId])
  @@map("campaign_contacts")
}

model KnowledgeBase {
  id             Int           @id @default(autoincrement())
  organizationId Int?          @map("organization_id")
  category       String
  question       String
  answer         String
  keywords       Json?
  priority       Int           @default(1)
  active         Boolean       @default(true)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([category])
  @@map("knowledge_base")
}

model EscalationRule {
  id             Int           @id @default(autoincrement())
  organizationId Int?          @map("organization_id")
  name           String
  conditions     Json
  action         String
  priority       Int           @default(1)
  active         Boolean       @default(true)
  createdAt      DateTime      @default(now()) @map("created_at")
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@map("escalation_rules")
}

model DailyAnalytics {
  id             Int           @id @default(autoincrement())
  organizationId Int?          @map("organization_id")
  date           DateTime      @db.Date
  totalCalls     Int           @default(0) @map("total_calls")
  resolvedCalls  Int           @default(0) @map("resolved_calls")
  escalatedCalls Int           @default(0) @map("escalated_calls")
  avgDuration    Decimal       @default(0) @map("avg_duration") @db.Decimal(8, 2)
  avgSentiment   Decimal       @default(0) @map("avg_sentiment") @db.Decimal(3, 2)
  createdAt      DateTime      @default(now()) @map("created_at")
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, date], name: "unique_org_date")
  @@index([organizationId, date])
  @@map("daily_analytics")
}

model VoiceSettings {
  id              Int           @id @default(autoincrement())
  organizationId  Int?          @map("organization_id")
  voiceId         String        @map("voice_id")
  voiceName       String        @map("voice_name")
  stability       Decimal       @default(0.5) @db.Decimal(3, 2)
  similarityBoost Decimal       @default(0.5) @map("similarity_boost") @db.Decimal(3, 2)
  style           Decimal       @default(0.0) @db.Decimal(3, 2)
  useSpeakerBoost Boolean       @default(true) @map("use_speaker_boost")
  active          Boolean       @default(true)
  createdAt       DateTime      @default(now()) @map("created_at")
  organization    Organization? @relation(fields: [organizationId], references: [id])

  @@map("voice_settings")
}

model SecurityIncident {
  id              Int       @id @default(autoincrement())
  incidentType    String    @map("incident_type")
  severity        String
  description     String
  ipAddress       String?   @map("ip_address")
  userId          Int?      @map("user_id")
  detectionMethod String    @map("detection_method")
  status          String    @default("open")
  resolvedAt      DateTime? @map("resolved_at")
  createdAt       DateTime  @default(now()) @map("created_at")

  @@index([incidentType])
  @@index([severity])
  @@index([status])
  @@index([createdAt])
  @@map("security_incidents")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?     @map("user_id")
  action     String
  resource   String
  resourceId String?  @map("resource_id")
  details    Json?
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}

model Survey {
  id        Int      @id @default(autoincrement())
  callId    Int      @unique @map("call_id")
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  call      Call     @relation(fields: [callId], references: [id], onDelete: Cascade)

  @@map("surveys")
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  userId    Int?     @map("user_id")
  actionUrl String?  @map("action_url")
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("notifications")
}

model Widget {
  id              String           @id @default(uuid())
  organizationId  Int              @map("organization_id")
  name            String
  isActive        Boolean          @default(true) @map("is_active")
  contextUrl      String?          @map("context_url")
  appearance      Json
  behavior        Json
  permissions     Json
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  contextExtracts ContextExtract[]
  widgetSessions  WidgetSession[]
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("widgets")
}

model WidgetSession {
  id                 String              @id @default(uuid())
  widgetId           String              @map("widget_id")
  sessionId          String              @unique @map("session_id")
  visitorId          String?             @map("visitor_id")
  ipAddress          String?             @map("ip_address")
  userAgent          String?             @map("user_agent")
  referrerUrl        String?             @map("referrer_url")
  status             String              @default("active")
  startTime          DateTime            @default(now()) @map("start_time")
  endTime            DateTime?           @map("end_time")
  duration           Int                 @default(0)
  messageCount       Int                 @default(0) @map("message_count")
  sentiment          String?
  sentimentScore     Decimal?            @map("sentiment_score") @db.Decimal(3, 2)
  metadata           Json?
  widgetInteractions WidgetInteraction[]
  widget             Widget              @relation(fields: [widgetId], references: [id], onDelete: Cascade)

  @@index([widgetId])
  @@index([startTime])
  @@map("widget_sessions")
}

model WidgetInteraction {
  id             Int           @id @default(autoincrement())
  sessionId      String        @map("session_id")
  sequenceNumber Int           @map("sequence_number")
  speaker        String
  content        String
  audioUrl       String?       @map("audio_url")
  timestamp      DateTime      @default(now())
  aiConfidence   Decimal?      @map("ai_confidence") @db.Decimal(3, 2)
  intent         String?
  sentiment      String?
  sentimentScore Decimal?      @map("sentiment_score") @db.Decimal(3, 2)
  processingTime Int?          @map("processing_time")
  session        WidgetSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)

  @@index([sessionId])
  @@index([timestamp])
  @@map("widget_interactions")
}

model ContextExtract {
  id          String   @id @default(uuid())
  widgetId    String   @map("widget_id")
  url         String
  title       String?
  description String?
  content     String
  keywords    Json?
  metadata    Json?
  extractedAt DateTime @default(now()) @map("extracted_at")
  isActive    Boolean  @default(true) @map("is_active")
  widget      Widget   @relation(fields: [widgetId], references: [id], onDelete: Cascade)

  @@unique([widgetId, url])
  @@index([widgetId])
  @@map("context_extracts")
}

model AiConfig {
  id                    Int          @id @default(autoincrement())
  organizationId        Int          @unique @map("organization_id")
  provider              String       @default("openai")
  model                 String       @default("gpt-4")
  temperature           Decimal      @default(0.7) @db.Decimal(3, 2)
  maxTokens             Int          @default(1000) @map("max_tokens")
  systemPrompt          String       @default("You are a helpful AI assistant for customer support.") @map("system_prompt")
  enableFunctionCalling Boolean      @default(true) @map("enable_function_calling")
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("ai_configs")
}

model VoiceConfig {
  id             Int          @id @default(autoincrement())
  organizationId Int          @unique @map("organization_id")
  provider       String       @default("elevenlabs")
  voiceId        String       @default("default") @map("voice_id")
  speed          Decimal      @default(1.0) @db.Decimal(3, 2)
  pitch          Decimal      @default(1.0) @db.Decimal(3, 2)
  stability      Decimal      @default(0.5) @db.Decimal(3, 2)
  clarity        Decimal      @default(0.75) @db.Decimal(3, 2)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("voice_configs")
}

model ProviderConfig {
  id             String         @id @default(uuid())
  organizationId Int            @map("organization_id")
  name           String
  type           String
  provider       String
  isActive       Boolean        @default(true) @map("is_active")
  isPrimary      Boolean        @default(false) @map("is_primary")
  credentials    Json
  settings       Json
  webhookUrl     String?        @map("webhook_url")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  lastTested     DateTime?      @map("last_tested")
  calls          ProviderCall[]
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, type, isPrimary], name: "unique_primary_provider")
  @@index([organizationId])
  @@index([type])
  @@map("provider_configs")
}

model ProviderCall {
  id               String         @id @default(uuid())
  providerConfigId String         @map("provider_config_id")
  callId           Int?           @map("call_id")
  externalCallId   String         @map("external_call_id")
  type             String
  status           String         @default("initiated")
  fromNumber       String         @map("from_number")
  toNumber         String         @map("to_number")
  duration         Int            @default(0)
  cost             Decimal?       @db.Decimal(10, 4)
  currency         String?        @default("USD")
  startTime        DateTime       @default(now()) @map("start_time")
  endTime          DateTime?      @map("end_time")
  recordingUrl     String?        @map("recording_url")
  errorCode        String?        @map("error_code")
  errorMessage     String?        @map("error_message")
  metadata         Json?
  call             Call?          @relation(fields: [callId], references: [id])
  providerConfig   ProviderConfig @relation(fields: [providerConfigId], references: [id], onDelete: Cascade)

  @@index([providerConfigId])
  @@index([callId])
  @@index([externalCallId])
  @@index([startTime])
  @@map("provider_calls")
}
